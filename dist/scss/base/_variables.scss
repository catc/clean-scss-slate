// ------- Variables -------

// = fonts =
$font1: "Open Sans", sans-serif;
$font2: "Open Sans Condensed", sans-serif;


// = colours =

// shades of black
$b1: #111;
$b2: #222;
$b3: #444;
$b4: #666;
$b5: #aaa;
$b6: #ddd;
$b7: #ededed;
$white: #fff;

// http://clrs.cc
$c-aqua:  #7FDBFF;
$c-blue:  #0074D9;
$c-navy:  #001F3F;
$c-teal:  #39CCCC;
$c-green: #2ECC40;
$c-olive: #3D9970;
$c-lime:  #01FF70;

$c-yellow:  #FFDC00;
$c-orange:  #FF851B;
$c-red:     #FF4136;
$c-fuchsia: #F012BE;
$c-purple:  #B10DC9;
$c-maroon:  #85144B;

$c-gray: #aaaaaa;
$c-silver: #dddddd;

// windows 8 color schemes
$w-grey: #242424;
$w-yellow: #F2B21B;
$w-green: #76BA43;
$w-blue: #436FB6;
$w-red: #AE1D3F; 

$w-brown: #613111;
$w-brown2: #2C1A0D;
$w-red2: #B62524;
$w-red3: #491111;
$w-fuschia: #C11E52;
$w-fuschia2: #4C0737;
$w-purple: #6D3393;
$w-purple2: #2C124D;
$w-purple3: #4D3D98;
$w-purple4: #252063;
$w-blue2: #206AB4;
$w-blue3: #15214C;
$w-turquoise: #008287;
$w-turquoise2: #034D60;
$w-emerald: #1B9947;
$w-emerald2: #1F4A23;
$w-green2: #34B44A;
$w-green3: #199947;
$w-orange: #F89723;
$w-orange2: #E36C25;
$w-red4: #EE3823;
$w-red5: #B72025;
$w-pink: #ED2977;
$w-pink2: #B71F6C;
$w-purple5: #8459A4;
$w-purple6: #663F98;
$w-aqua: #4CA7DD;
$w-aqua2: #2B5BA9;
$w-aqua3: #66C0ED;
$w-aqua4: #5C9AD3;
$w-seaspray: #4AC1BE;
$w-seaspray2: #00A9A9;
$w-lgreen: #92C83D;
$w-lgreen2: #83BA40;
$w-yellow2: #E1B923;
$w-yellow3: #D19D2A;
$w-pink3: #F178AE;
$w-pink4: #D467A7;

$w-turquoise3: #00A4A4;
$w-orange3: #F47B28;
$w-grey2: #696969;

// flat ui
$f-turqouise: #1abc9c;
$f-green-sea: #16a085;
$f-emerald: #2ecc71;
$f-nephritis: #27ae60;
$f-peter-river: #3498db;
$f-belize-hole: #2980b9;
$f-ametyhs: #9b59b6;
$f-wisteria: #8e44ad;
$f-wet-asphalt: #34495e;
$f-midnight-blue: #2c3e50;
$f-sun-flower: #f1c40f;
$f-orange: #f39c12;
$f-carrot: #e67e22;
$f-pumpkin: #d35400;
$f-alizarin: #e74c3c;
$f-pomegranate: #c0392b;
$f-clouds: #ecf0f1;
$f-silver: #bdc3c7;
$f-concrete: #95a5a6;
$f-asbestos: #7f8c8d;

/*
	Other resources
	-	http://colourco.de/

*/


// = media query breakpoints =
$bsmall: 480px;
$bmed: 767px;
$bbig: 979px;
$btablet: 1024px;
$blarge: 1200px;
$bhuge: 1600px;


// = mixins =

// grid setup
@mixin grid_setup () {
		@for $i from 1 through $grid_total_parts {
				.col_#{$i} {
						width:( (100*$i + $i*$grid_spacing - $grid_total_parts*$grid_spacing)/$grid_total_parts)  *1%;
				} 
		}
		.col_#{$grid_total_parts} { margin-left: 0 !important; }
}

// media queries
@mixin respond-to($mediaq) {
	@if $mediaq == phone {				// to 480px
		@media only screen and (max-width : $bsmall) { @content; }
	}
	@else if $mediaq == tablet {		// to 767
		@media only screen and (max-width : $bmed) { @content; }
	}
	@else if $mediaq == computer1 {		// 768 - 979
		@media only screen and ( min-width: $bmed + 1 ) and ( max-width : $bbig) { @content; }
	} 		
	@else if $mediaq == nontablet {		// 1025+ (bigger than ipads)
		@media only screen and (min-width : $btablet + 1 ) { @content; }
	}
	@else if $mediaq == computer2 {		// 980 - 1199
		@media only screen and (min-width : $bbig + 1) and ( max-width : $blarge - 1) { @content; }
	}
	@else if $mediaq == computer3 {		// 1200+
		@media only screen and (min-width : $blarge) { @content; }
	}
	@else if $mediaq == huge {			// 1600+
		@media only screen and (min-width : $bhuge) { @content; }
	}
}
// call by: 		@include respond-to(computer1){ // whatever code you want in this media query }

@mixin placeholder {
	::-webkit-input-placeholder {@content};
	::-moz-placeholder          {@content};
	:-moz-placeholder           {@content};
	:-ms-input-placeholder      {@content};
}
// call by: 		@include placeholder { // include font style, color, weight }


@mixin transform ($content...) {
	-webkit-transform : $content;
	-ms-transform     : $content;
	transform         : $content;
}

@mixin animation ($content...) {
	-webkit-animation : $content;
	animation         : $content;
}


@mixin keyframes ($name) {
	@-webkit-keyframes #{$name} {
		@content;
	}
	@keyframes #{$name} {
		@content;
	}
}
/*  call by: 
	@include keyframes( NAME ) { 
		from { color: red; }
		to { color: blue; }

		// or
		o% { color: red; }
		100% { background: 100% }
	}
*/



// = from bourbon = 

@function _linear-positions-parser($pos) {
	$type: type-of(nth($pos, 1));
	$spec: null;
	$degree: null;
	$side: null;
	$corner: null;
	$length: length($pos);
	// Parse Side and corner positions
	@if ($length > 1) {
		@if nth($pos, 1) == "to" { // Newer syntax
			$side: nth($pos, 2);

			@if $length == 2 { // eg. to top
				// Swap for backwards compatability
				$degree: _position-flipper(nth($pos, 2));
			}
			@else if $length == 3 { // eg. to top left
				$corner: nth($pos, 3);
			}
		}
		@else if $length == 2 { // Older syntax ("top left")
			$side: _position-flipper(nth($pos, 1));
			$corner: _position-flipper(nth($pos, 2));
		}

		@if ("#{$side} #{$corner}" == "left top") or ("#{$side} #{$corner}" == "top left") {
			$degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
		}
		@else if ("#{$side} #{$corner}" == "right top") or ("#{$side} #{$corner}" == "top right") {
			$degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
		}
		@else if ("#{$side} #{$corner}" == "right bottom") or ("#{$side} #{$corner}" == "bottom right") {
			$degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
		}
		@else if ("#{$side} #{$corner}" == "left bottom") or ("#{$side} #{$corner}" == "bottom left") {
			$degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
		}
		$spec: to $side $corner;
	}
	@else if $length == 1 {
		// Swap for backwards compatability
		@if $type == string {
			$degree: $pos;
			$spec: to _position-flipper($pos);
		}
		@else {
			$degree: -270 - $pos; //rotate the gradient opposite from spec
			$spec: $pos;
		}
	}
	$degree: unquote($degree + ",");
	$spec:   unquote($spec + ",");
	@return $degree $spec;
}

@function _position-flipper($pos) {
	@return if($pos == left, right, null)
				 if($pos == right, left, null)
				 if($pos == top, bottom, null)
				 if($pos == bottom, top, null);
}


@function _linear-gradient-parser($image) {
	$image: unquote($image);
	$gradients: ();
	$start: str-index($image, "(");
	$end: str-index($image, ",");
	$first-val: str-slice($image, $start + 1, $end - 1);

	$prefix: str-slice($image, 0, $start);
	$suffix: str-slice($image, $end, str-length($image));

	$has-multiple-vals: str-index($first-val, " ");
	$has-single-position: unquote(_position-flipper($first-val) + "");
	$has-angle: is-number(str-slice($first-val, 0, 0));

	@if $has-multiple-vals {
		$gradients: _linear-side-corner-parser($image, $first-val, $prefix, $suffix, $has-multiple-vals);
	}

	@else if $has-single-position != "" {
		$pos: unquote($has-single-position + "");

		$gradients: (
			webkit-image: -webkit- + $image,
			spec-image: $prefix + "to " + $pos + $suffix
		);
	}

	@else if $has-angle {
		// Rotate degree for webkit
		$gradients: _linear-angle-parser($image, $first-val, $prefix, $suffix);
	}

	@else {
		$gradients: (
			webkit-image: -webkit- + $image,
			spec-image: $image
		);
	}

	@return $gradients;
}



@mixin linear-gradient($pos, $g1, $g2: null,
						 $g3: null, $g4: null,
						 $g5: null, $g6: null,
						 $g7: null, $g8: null,
						 $g9: null, $g10: null,
						 $fallback: null) {
	// Detect what type of value exists in $pos
	$pos-type: type-of(nth($pos, 1));
	$pos-spec: null;
	$pos-degree: null;

	// If $pos is missing from mixin, reassign vars and add default position
	@if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
		$g10: $g9; $g9: $g8; $g8: $g7; $g7: $g6; $g6: $g5;
		$g5: $g4; $g4: $g3; $g3: $g2; $g2: $g1; $g1: $pos;
		$pos: null;
	}

	@if $pos {
		$positions: _linear-positions-parser($pos);
		$pos-degree: nth($positions, 1);
		$pos-spec:   nth($positions, 2);
	}

	$full: $g1, $g2, $g3, $g4, $g5, $g6, $g7, $g8, $g9, $g10;

	// Set $g1 as the default fallback color
	$fallback-color: nth($g1, 1);

	// If $fallback is a color use that color as the fallback color
	@if (type-of($fallback) == color) or ($fallback == "transparent") {
		$fallback-color: $fallback;
	}

	background-color: $fallback-color;
	background-image: -webkit-linear-gradient($pos-degree $full); // Safari 5.1+, Chrome
	background-image: unquote("linear-gradient(#{$pos-spec}#{$full})");
}
// call by: 	@include linear-gradient( args )
/* 	more examples:
	@include linear-gradient(#1e5799, #2989d8);
	@include linear-gradient(to top, #8fdce5, #3dc3d1);
	@include linear-gradient(to top, #8fdce5, #3dc3d1, $fallback: red);
	@include linear-gradient(50deg, #1e5799 0%, #2989d8 50%, #207cca 51%, #7db9e8 100%);
*/